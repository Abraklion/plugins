{"version":3,"file":"validation.js","mappings":"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","sources":["webpack://gulp-html-scss/./src/js/core/component.js","webpack://gulp-html-scss/./src/js/jqueryvalidation.js"],"sourcesContent":["\r\n/**\r\n *  Базовый класс для компонентов\r\n * */\r\nexport default class Component {\r\n\r\n  /**\r\n   * Конструктор\r\n   * @param {string} id         - находит или создает компонент.\r\n   * @param {Object=} options   - конфигурация.\r\n   * @param {string|null} [options.create] - названи тега, генерировать компонент программно(по умолчанию отбирается со страницы)\r\n   * @param {string} [options.display] - тип отображения элемента на странице при показе\r\n   */\r\n  constructor(id,{\r\n    create = null,\r\n    display = 'block'\r\n  } = {}) {\r\n\r\n    (!create) ? this.$el = document.querySelector(id) :\r\n                this.$el = document.createElement(create)\r\n                this.$el.setAttribute('id', id.slice(1))\r\n\r\n    this._display = display\r\n  }\r\n\r\n  /**\r\n   * Интерфейс компонента\r\n   * @return {void}\r\n   */\r\n  init() {}\r\n\r\n  /**\r\n   * Скрывает компонент\r\n   * @return {void}\r\n   */\r\n  hide() {\r\n    this.$el.style.display = 'none'\r\n\r\n    this._onHide() // -> после скрытия компонента вызываем метод\r\n  }\r\n\r\n  /**\r\n   * Показать компонент\r\n   * @return {void}\r\n   */\r\n  show() {\r\n    this.$el.style.display = this._display\r\n\r\n    this._onShow() // -> после показа компонента вызываем метод\r\n  }\r\n\r\n  /**\r\n   * Действия после скрытия компонента (хук)\r\n   * @return {void}\r\n   */\r\n  _onHide() {\r\n\r\n  }\r\n\r\n  /**\r\n   * Действия после показа компонента (хук)\r\n   * @return {void}\r\n   */\r\n  _onShow() {\r\n\r\n  }\r\n\r\n}\r\n","import $ from 'jquery'\nimport 'jquery-validation'\n\nimport Component from \"./core/component\";\n\n/* ========================================== *\n *  Плагин Jquery-validation (Валидатор форм) *\n * ========================================== */\n\n/**\n *  Форма\n * */\nclass FormComponent extends Component {\n\n  /**\n   * Конструктор\n   * @param {string} id      - находит компонент.\n   */\n  constructor(id) {\n\n    super(id);\n\n    this._init()\n  }\n\n  /**\n   * Интерфейс компонента\n   * @return {void}\n   */\n  _init() {\n    this.form = this._validate()\n\n    this.$el.addEventListener('submit', submitHandler.bind(this))\n  }\n\n  /**\n   * Объект, содержащий все методы проверки, известные валидатору\n   * Оф дока: https://jqueryvalidation.org/category/validator/#jquery-validator-methods\n   * @return {Object}\n   */\n  methods() {\n    return $.validator.methods\n\n    // normalizer -> подготавливает / преобразует значение элементов для проверки.\n    // оф дока: https://jqueryvalidation.org/category/methods/#normalizer\n\n    // require_from_group -> обеспечивает заполнение заданного количества полей в группе.\n      // требуется доп. подключения: Additional-methods.js\n      // оф дока: https://jqueryvalidation.org/category/methods/#require-from-group-method\n\n    // =================================================================================== //\n\n    // required    -> делает элемент обязательным.\n      // оф дока: https://jqueryvalidation.org/category/methods/#required-method\n\n    // dateISO -> заставляет элемент требовать дату по стандартам ISO\n      // оф дока: https://jqueryvalidation.org/category/methods/page/2/#dateiso-method\n\n    // email -> заставляет элемент требовать действительный адрес электронной почты\n      // оф дока: https://jqueryvalidation.org/category/methods/page/2/#email-method\n\n    // number -> заставляет элемент требовать число (целые и дробные)\n      // оф дока: https://jqueryvalidation.org/category/methods/#number-method\n\n    // digits  -> заставляет элемент требовать только цифры (целые)\n      // оф дока: https://jqueryvalidation.org/category/methods/page/2/#digits-method\n\n    // url -> заставляет элемент требовать действительный URL-адрес.\n      // оф дока: https://jqueryvalidation.org/category/methods/#url-method\n\n    // step -> шаг.\n      // оф дока: https://jqueryvalidation.org/category/methods/#step-method\n\n    // remote -> запрашивает удаленый ресурс для проверки элемента на допустимость\n      // оф дока: https://jqueryvalidation.org/category/methods/#remote-method\n\n    // equalTo -> требует, чтобы элемент был таким же, как другой\n      // оф дока: https://jqueryvalidation.org/category/methods/page/2/#equalto-method\n\n    // =================================================================================== //\n\n    // требуется доп. подключения: Additional-methods.js для всех методов в этом блоке\n\n    // creditcard -> заставляет элемент запрашивать номер кредитной карты\n      // оф дока: https://jqueryvalidation.org/category/methods/page/3/#creditcard-method\n\n    // extension -> заставляет элемент требовать определенного расширения файла\n      // оф дока: https://jqueryvalidation.org/category/methods/page/2/#extension-method\n\n    // accept -> заставляет загрузку файла принимать только указанные типы mime.\n      // оф дока: https://jqueryvalidation.org/category/methods/page/3/#accept-method\n\n    // =================================================================================== //\n\n    // min -> заставляет элемент требовать заданный минимум числа\n      // оф дока: https://jqueryvalidation.org/category/methods/page/2/#min-method\n    // minlength -> заставляет элемент требовать заданную минимальную длину\n      // оф дока: https://jqueryvalidation.org/category/methods/page/2/#minlength-method\n\n    // =================================================================================== //\n\n    // max -> заставляет элемент требовать заданный максимум числа\n      // оф дока: https://jqueryvalidation.org/category/methods/page/2/#max-method\n    // maxlength -> заставляет элемент требовать заданную максимальную длину\n      // оф дока: https://jqueryvalidation.org/category/methods/page/2/#maxlength-method\n\n    // =================================================================================== //\n\n    // range -> заставляет элемент требовать заданный диапазон значений\n      // оф дока: https://jqueryvalidation.org/category/methods/#range-method\n    // rangelength -> заставляет элемент требовать заданую длину из диапазона\n      // оф дока: https://jqueryvalidation.org/category/methods/#rangelength-method\n  }\n\n  /**\n   * Настройки валидирования формы\n   * @return {Object}\n   */\n  _validate() {\n\n    // https://jqueryvalidation.org/ - дока\n\n    return $(this.$el).validate({\n      // -> включить режим отладки\n      debug: false,\n\n      // -> настройка полей формы (какие поля валидировать)\n      rules: {\n        attestation_date: {\n          required: true,\n          dateISO: true\n        },\n        next_attestation_date: {\n          required: true,\n          dateISO: true\n        },\n        card_number: {\n          required: true,\n          number: true,\n\n          minlength: 3,\n          maxlength: 10\n        },\n        department: {\n          required: true\n        },\n        asd: {\n          required: true,\n          accept: \"audio/*\"\n        }\n      },\n\n      // -> настройка пользовательских сообщений (для валидируемых полей)\n      messages: {\n        attestation_date: {\n          required: 'Пожалуйста, укажите дату аттестации.',\n          dateISO: 'Пожалуйста, введите дату формате в (дд.мм.гггг).'\n        },\n        next_attestation_date: {\n          required: 'Пожалуйста, укажите дату следующий аттестации.',\n          dateISO: 'Пожалуйста, введите дату формате в (дд.мм.гггг).'\n        },\n        card_number: {\n          required: 'Пожалуйста, укажите номер документа.',\n          number: 'Номер документа, может содержать только числа.',\n\n          minlength: 'Пожалуйста, введите не менее {0} символов.',\n          maxlength: 'Пожалуйста, введите не более {0} символов.'\n        },\n        department: {\n          required: 'Пожалуйста, укажите отдел.'\n        }\n      },\n\n\n      // -> будет игнорировать элементы с переданым классом (по умолчанию: \":hidden\")\n      ignore: ':hidden',\n\n\n      // -> класс добавляется к полю, если оно валидно (по умолчанию: \"valid\")\n      validClass: 'sForm__valid',\n\n      // -> класс добавляется к сообщению и полю, если оно НЕ валидно (по умолчанию: \"error\")\n      errorClass: 'sForm__error',\n\n      // -> дополнительный класс (по умолчанию: '')\n      success: '',\n\n\n      // -> тэг который будет создаваться, в него записываться сообщения (по умолчанию: \"label\")\n      errorElement: 'span',\n\n      // -> обертка над тэгом  (по умолчанию: '')\n      wrapper: '',\n\n      // -> групирует сообщения в одни блок (по умолчанию: '')\n      errorLabelContainer: '',\n\n      // -> групирует пользовательские сообщения\n      groups: {\n        // https://jqueryvalidation.org/category/plugin/#groups - оф дока\n      },\n\n      // -> настраеваем область куда показывать ошибки\n      errorPlacement: function(error, element) {\n        // https://jqueryvalidation.org/category/plugin/#errorplacement - оф дока\n\n        error.appendTo(element.prev());\n      },\n\n\n\n      // -> если форма валидна и готова в отпраке на сервер, попадаем в этот обработчик\n      // submitHandler: function(form,e) {\n      //   // https://jqueryvalidation.org/category/plugin/#submithandler - оф дока\n      //\n      //   // делаем действия например: передаем форму аякс запросом на сервер\n      //   // или мутируем данных в форме (form)\n      //\n      //   // и отправляем форму\n      //   form.submit();\n      // },\n\n      // -> если форма НЕ валидна и НЕ готова в отпраке на сервер, попадаем в этот обработчик\n      invalidHandler: function(event, validator) {\n        // https://jqueryvalidation.org/category/plugin/#invalidhandler - оф дока\n\n        // Пример. Отображает под формой сообщение сколько полей НЕ валидны\n        let  errors = validator.numberOfInvalids(),\n          quantity = $(\".quantity\");\n\n        if (errors) {\n          quantity.html(`Вы пропустили <b>${errors}</b> поля. Они были выделены`);\n\n          quantity.show();\n        } else {\n          quantity.hide();\n        }\n      }\n\n    })\n  }\n\n  /**\n   * Проверяет форму, возвращает true, если она действительна, иначе false\n   * Оф дока: https://jqueryvalidation.org/category/validator/#validator-form()\n   * @return {boolean}\n   */\n  _valid() {\n    return this.form.form()\n  }\n\n  /**\n   * Сбрасывает форму\n   * Оф дока: https://jqueryvalidation.org/category/validator/#validator-resetform()\n   * @return {boolean}\n   */\n  reset() {\n    this.form.resetForm()\n\n    // заебенил от себя потому что метод resetForm сбравывает почти нечего\n    this.$el.reset()\n    $('.sForm__error').remove()\n    $('.sForm__input').removeAttr('aria-describedby')\n  }\n\n  /**\n   * Возвращает количество полей которые не прошли валидацию\n   * Оф дока: https://jqueryvalidation.org/category/validator/#validator-numberofinvalids()\n   * @return {number}\n   */\n  _numberOfInvalids() {\n    return this.form.numberOfInvalids()\n  }\n\n\n  /**\n   * Уничтожает этот экземпляр валидатора, освобождая ресурсы и отменяя регистрацию событий\n   * Оф дока: https://jqueryvalidation.org/category/validator/#validator-destroy()\n   * @return {this}\n   */\n  destroy() {\n    this.form.destroy()\n\n    return this\n  }\n\n}\n\n/**\n * Обработчик отправки формы\n * @return {void}\n */\nasync function submitHandler(e) {\n\n  e.preventDefault()\n\n  if(this._valid()){\n    let btnForm = $(e.target).find('.sForm__button')\n\n    btnForm.prop(\"disabled\", true)\n\n    try{\n\n      console.log(\"Отправляем аякс запрос\")\n\n    } catch (e) {\n\n      console.log(\"Ошибка\")\n\n    } finally {\n\n      setTimeout(() => {\n        btnForm.prop(\"disabled\", false)\n\n        this.reset()\n      }, 1000)\n\n    }\n  }\n\n}\n\n// вызов\nconst form = new FormComponent('#myForm')\n\n// методы проверки полей\nconsole.log(form.methods())\n\n"],"names":["Component","constructor","id","create","display","$el","document","querySelector","createElement","setAttribute","slice","_display","init","hide","style","_onHide","show","_onShow","$","FormComponent","_init","form","_validate","addEventListener","submitHandler","bind","methods","validator","validate","debug","rules","attestation_date","required","dateISO","next_attestation_date","card_number","number","minlength","maxlength","department","asd","accept","messages","ignore","validClass","errorClass","success","errorElement","wrapper","errorLabelContainer","groups","errorPlacement","error","element","appendTo","prev","invalidHandler","event","errors","numberOfInvalids","quantity","html","_valid","reset","resetForm","remove","removeAttr","_numberOfInvalids","destroy","e","preventDefault","btnForm","target","find","prop","console","log","setTimeout"],"sourceRoot":""}