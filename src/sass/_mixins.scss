@use "variables" as v;
@use "function" as f;

@use "sass:map";
@use "sass:meta";

//-----===== Миксины ====-----//

// min-width | max-width в зависимости от метод разработки " mobile-first | desktop-first"
@mixin media($breakpoint, $orientation: v.$orientation, $container: v.$container){

  $z: 0;
  $route: 'min';

  @if $orientation == 'desktop-first' {
    $z: 1;
    $route: 'max';
  }

  @if meta.type-of($breakpoint) == "string" {

    @media (#{$route}-width: map.get(map.get($container, $breakpoint),"breakpoint") - $z) {
      @content;
    }

  } @else {

    @media (#{$route}-width: #{$breakpoint}px) {
      @content;
    }

  }

}

// min-width and max-width
@mixin media-section($breakpoint-start, $breakpoint-end, $container: v.$container){

  @if meta.type-of($breakpoint-start) == "string" and meta.type-of($breakpoint-end) == "string" {

    @media (min-width: map.get(map.get($container, $breakpoint-start),"breakpoint")) and (max-width: map.get(map.get($container, $breakpoint-end),"breakpoint") - 1){
      @content;
    }

  } @else if meta.type-of($breakpoint-start) == "string" {

    @media (min-width: map.get(map.get($container, $breakpoint-start),"breakpoint")) and (max-width: #{$breakpoint-end}px){
      @content;
    }

  } @else if meta.type-of($breakpoint-end) == "string" {

    @media (min-width: #{$breakpoint-start}px) and (max-width: map.get(map.get($container, $breakpoint-end),"breakpoint") - 1){
      @content;
    }

  } @else {

    @media (min-width: #{$breakpoint-start}px) and (max-width: #{$breakpoint-end}px){
      @content;
    }

  }
}

// Подключения шрифта
@mixin fontInclude($font_name, $file_name, $style, $weight, $local) {
  @font-face {
    font-family: $font_name;
    font-style: $style;
    font-weight: $weight;
    font-display: swap;
    src: local($local), url("../fonts/#{$file_name}.woff2") format("woff2"), url("../fonts/#{$file_name}.woff") format("woff");
  }
}

// Адаптивная типографика
@mixin dynamicText($minSizePercent, $maxSize, $minSize, $minWidthPx, $maxWidth, $minWidth) {
  font-size: calc(#{$minSizePercent} + (#{$maxSize} - #{$minSize}) * (100vw - #{$minWidthPx}) / (#{$maxWidth} - #{$minWidth}));
}
// minSizePercent - минимальне значения шрифта в %;
// maxSize - максимальный размер шрифта;
// minSize - минимальный размер шрифта;
// minWidthPx - минимальный ширина viewport в px;
// maxWidth - максимальная ширина viewport;
// minWidth - минимальная ширина viewport;

// Адаптивное видео
@mixin adaptive-video() {
  position: relative;
  padding-bottom: 56.25%; /* задаёт высоту контейнера для 16:9 (если 4:3 — поставьте 75%) */
  padding-top: 30px;
  height: 0;
  overflow: hidden;

  iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

}

// Убирает обтекания
@mixin clearfix() {
  &:before,
  &:after {
    content: '';
    display: table;
    clear: both;
  }
}

// Обнуляет списки
@mixin list {
  margin: 0;
  padding: 0;
  list-style: none;
}


